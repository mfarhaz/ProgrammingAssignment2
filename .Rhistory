x<-rnorm(10)
x
x<-numeric()
x
x<-matrix()
x
x<-matrix(3,2)
dim(x)
x
rnorm(x)
dim(x)
x
x<-matrix(3,2)
x
?"matrix"
x<-matrix(nrow=3,ncol=2)
x
x<-rnorm(6)
x
x<-matrix(rnorm(6),nrow=3,ncol=2)
x
x<-matrix(rnorm(6),nrow=3,ncol=3)
x
solve(x)
?solve
x<-matrix(c(1,8,-9,7,5,0,1,0,4,4,0,0,1,2,5,0,0,0,1,-5,0,0,0,0,1),nrow=5,ncol=5)
x
solve(x)
y<-solve(x)
y
x*y
2*3
## Return a matrix that is the inverse of 'x'
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setinverse<-function(inverse) m<<-inverse
getinverse<-function() m
list(set = set, get = get,setmean = setmean,getmean = getmean)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
source("cachematrix.R")
myMatrix <- matrix(c(1,8,-9,7,5,0,1,0,4,4,0,0,1,2,5,0,0,0,1,-5,0,0,0,0,1),nrow=5,ncol=5)
anotherMatrix <- makeCacheMatrix(myMatrix)
anotherMatrix <- makeCacheMatrix(myMatrix)
source("cachematrix.R")
myMatrix <- matrix(c(1,8,-9,7,5,0,1,0,4,4,0,0,1,2,5,0,0,0,1,-5,0,0,0,0,1),nrow=5,ncol=5)
anotherMatrix <- makeCacheMatrix(myMatrix)
anotherMatrix$get()
anotherMatrix$getinverse()
cacheSolve(anotherMatrix)
class(anotherMatrix$get())
class(anotherMatrix$getsolve())
class(anotherMatrix$getinverse())
anotherMatrix$getinverse()
cacheSolve(anotherMatrix)
$getinverse
getinverse
result <- makeCacheMatrix (x)
result
result <- makeCacheMatrix (x)
result$get()
result$set()
result$set(matrix(c(1,8,-9,7,5,0,1,0,4,4,0,0,1,2,5,0,0,0,1,-5,0,0,0,0,1),nrow=5,ncol=5))
result$get()
result$getinverse()
cacheSolve(result)
result$setinverse()
inverse<-result$setinverse()
inverse<-cachesolve(result)
source("cachematrix.R")
myMatrix <- matrix(c(1,8,-9,7,5,0,1,0,4,4,0,0,1,2,5,0,0,0,1,-5,0,0,0,0,1),nrow=5,ncol=5)
anotherMatrix <- makeCacheMatrix(myMatrix)
anotherMatrix$get()
anotherMatrix$getinverse()
cacheSolve(anotherMatrix)
$getinverse
class(anotherMatrix$get())
class(anotherMatrix$getsolve())
class(anotherMatrix$getinverse())
anotherMatrix$getinverse()
